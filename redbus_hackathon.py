# -*- coding: utf-8 -*-
"""redbus1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18G5qU7S27ElyLAQcVqO7drcy7d2Lg6-j
"""

import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split


train = pd.read_csv('train_rdbs.csv')
test = pd.read_csv('test_redbus.csv')
transactions = pd.read_csv('transactions_rdbs.csv')


features_dbd15 = transactions[transactions['dbd'] == 15]


features = features_dbd15.groupby(['doj', 'srcid', 'destid']).agg({
    'cumsum_seatcount': 'sum',
    'cumsum_searchcount': 'sum',
    'srcid_tier': 'first',
    'destid_tier': 'first'
}).reset_index()


for df in [train, test, features]:
    df['doj'] = pd.to_datetime(df['doj'])


train_merged = pd.merge(train, features, on=['doj', 'srcid', 'destid'], how='left')
test_merged  = pd.merge(test,  features, on=['doj', 'srcid', 'destid'], how='left')


def preprocess(df):
    df['day'] = df['doj'].dt.day
    df['month'] = df['doj'].dt.month
    df['dayofweek'] = df['doj'].dt.dayofweek
    df['is_weekend'] = df['dayofweek'].isin([5, 6]).astype(int)
    df['srcid_tier'] = df['srcid_tier'].str.replace('tier', '', case=False).astype(float)
    df['destid_tier'] = df['destid_tier'].str.replace('tier', '', case=False).astype(float)
    df.drop(['doj'], axis=1, inplace=True)
    return df

train_merged = preprocess(train_merged)
test_merged = preprocess(test_merged)


train_merged.fillna(0, inplace=True)
test_merged.fillna(0, inplace=True)


X = train_merged.drop('final_seatcount', axis=1)
y = train_merged['final_seatcount']


numerical_cols = [
    'srcid', 'destid', 'cumsum_seatcount', 'cumsum_searchcount',
    'srcid_tier', 'destid_tier', 'day', 'month', 'dayofweek', 'is_weekend'
]
scaler = StandardScaler()
X[numerical_cols] = scaler.fit_transform(X[numerical_cols])
test_merged[numerical_cols] = scaler.transform(test_merged[numerical_cols])


X_train, X_val, y_train, y_val = train_test_split(
    X, y, test_size=0.2, random_state=42
)


model = RandomForestRegressor(random_state=42, n_estimators=100)
model.fit(X_train, y_train)


y_val_pred = model.predict(X_val)
rmse_val = np.sqrt(mean_squared_error(y_val, y_val_pred))
print(f"✅ Validation RMSE: {rmse_val:.4f}")


route_keys = test_merged['route_key']  # Save for submission
X_test_final = test_merged.drop('route_key', axis=1).reset_index(drop=True)
y_test_pred = model.predict(X_test_final).astype(int)


submission = pd.DataFrame({
    'route_key': test['route_key'],
    'final_seatcount': y_test_pred
})
submission.to_csv("rdbs_submission.csv", index=False)
print("✅ Submission file 'rdbs_submission.csv' created successfully.")

from lightgbm import LGBMRegressor

lgb_model = LGBMRegressor(
    n_estimators=1000,
    learning_rate=0.05,
    max_depth=7,
    random_state=42
)

lgb_model.fit(X_train, y_train)

y_val_pred = lgb_model.predict(X_val)
rmse_val = np.sqrt(mean_squared_error(y_val, y_val_pred))
print(f"✅ Validation RMSE: {rmse_val:.4f}")


route_keys = test_merged['route_key']


X_test_final = test_merged.drop(['route_key'], axis=1)


y_test_pred = lgb_model.predict(X_test_final)


y_test_pred = np.round(y_test_pred).astype(int)


submission = pd.DataFrame({
    'route_key': route_keys,
    'final_seatcount': y_test_pred
})


submission.to_csv("rdbs_submission1.csv", index=False)
print("✅ Submission file 'rdbs_submission.csv' created successfully.")
